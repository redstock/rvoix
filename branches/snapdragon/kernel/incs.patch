diff -Naurwd incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audio_dev_ctl.c incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audio_dev_ctl.c
--- incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audio_dev_ctl.c	2011-06-13 15:37:32.000000000 +0400
+++ incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audio_dev_ctl.c	2011-06-13 17:47:00.000000000 +0400
@@ -68,13 +68,24 @@
 	signed int voice_rx_vol;
 	int tx_mute;
 	int rx_mute;
+	int voice_state;
 };
 
 static struct audio_routing_info routing_info;
 
+int msm_get_voice_state(void)
+{
+        MM_DBG("voice state %d\n", routing_info.voice_state);
+        return routing_info.voice_state;
+}
+EXPORT_SYMBOL(msm_get_voice_state);
+
 int msm_set_voice_mute(int dir, int mute)
 {
 	MM_ERR("dir %x mute %x\n", dir, mute);
+        if (!audio_dev_ctrl.voice_rx_dev
+                || !audio_dev_ctrl.voice_tx_dev)
+                return -EPERM;
 	if (dir == DIR_TX) {
 		routing_info.tx_mute = mute;
 		broadcast_event(AUDDEV_EVT_DEVICE_VOL_MUTE_CHG,
@@ -90,6 +101,9 @@
 
 int msm_set_voice_vol(int dir, s32 volume)
 {
+        if (!audio_dev_ctrl.voice_rx_dev
+                || !audio_dev_ctrl.voice_tx_dev)
+                return -EPERM;
 	if (dir == DIR_TX) {
 		routing_info.voice_tx_vol = volume;
 		broadcast_event(AUDDEV_EVT_DEVICE_VOL_MUTE_CHG,
@@ -494,7 +508,7 @@
 	u32 session_mask = 0;
 	u32 clnt_type_mask = 0;
 
-	MM_DBG(": clnt_type 0x%08x\n", clnt_type);
+	MM_DBG(": clnt_type 0x%08x, sid=%d\n", clnt_type, session_id);
 
 	if ((clnt_type == AUDDEV_CLNT_VOC) && (session_id != 0))
 		return -EINVAL;
@@ -566,9 +580,8 @@
 							SESSION_IGNORE);
 			}
 		}
-		MM_DBG("info->set_sample_rate = %d\n", info->set_sample_rate);
-		MM_DBG("routing_info.enc_freq.freq = %d\n",
-					routing_info.enc_freq[session_id].freq);
+	/*	MM_DBG("info->set_sample_rate = %d\n", info->set_sample_rate);
+		MM_DBG("routing_info.enc_freq.freq = %d\n", routing_info.enc_freq[session_id].freq); */
 	}
 	return rc;
 }
@@ -744,11 +757,14 @@
 
 	if ((evt_id != AUDDEV_EVT_START_VOICE)
 		&& (evt_id != AUDDEV_EVT_END_VOICE)
-		&& (evt_id != AUDDEV_EVT_STREAM_VOL_CHG)) {
+                && (evt_id != AUDDEV_EVT_STREAM_VOL_CHG)
+                && (evt_id != AUDDEV_EVT_VOICE_STATE_CHG)) {
 		dev_info = audio_dev_ctrl_find_dev(dev_id);
-		if (IS_ERR(dev_info))
+                if (IS_ERR(dev_info)) {
+                        MM_ERR("pass invalid dev_id\n");
 			return;
 	}
+        }
 
 	if (event.cb != NULL)
 		callback = event.cb;
@@ -756,6 +772,9 @@
 		return;
 	mutex_lock(&session_lock);
 
+        if (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)
+                routing_info.voice_state = dev_id;
+
 	evt_payload = kzalloc(sizeof(union auddev_evt_data),
 			GFP_KERNEL);
 
@@ -785,8 +804,10 @@
 		session_mask = (0x1 << (clnt_id))
 				<< (8 * ((int)callback->clnt_type-1));
 
-		if (evt_id == AUDDEV_EVT_STREAM_VOL_CHG) {
-			MM_DBG("AUDDEV_EVT_STREAM_VOL_CHG\n");
+                if ((evt_id == AUDDEV_EVT_STREAM_VOL_CHG) || 
+                        (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)) {
+			MM_DBG("AUDDEV_EVT_STREAM_VOL_CHG or\
+                                AUDDEV_EVT_VOICE_STATE_CHG\n");
 			goto volume_strm;
 		}
 
@@ -816,7 +837,7 @@
 				else
 					evt_payload->session_vol =
 						msm_vol_ctl.volume;
-			} else if (evt_id == AUDDEV_EVT_FREQ_CHG) {
+			} else if (evt_id == AUDDEV_EVT_FREQ_CHG && dev_info != NULL) {
 				if (routing_info.dec_freq[clnt_id].evt) {
 					routing_info.dec_freq[clnt_id].evt
 							= 0;
@@ -832,14 +853,18 @@
 					evt_payload->freq_info.acdb_dev_id
 						= dev_info->acdb_id;
 				}
-			} else
+			} else if (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)
+                                evt_payload->voice_state =
+                                        routing_info.voice_state;
+                        else if (dev_info != NULL)
 				evt_payload->routing_id = dev_info->copp_id;
 			callback->auddev_evt_listener(
 					evt_id,
 					evt_payload,
 					callback->private_data);
 sent_dec:
-			if (evt_id != AUDDEV_EVT_STREAM_VOL_CHG)
+                        if ((evt_id != AUDDEV_EVT_STREAM_VOL_CHG) &&
+                                (evt_id != AUDDEV_EVT_VOICE_STATE_CHG))
 				routing_info.dec_freq[clnt_id].freq
 						= dev_info->set_sample_rate;
 
@@ -865,7 +890,10 @@
 					evt_payload->freq_info.acdb_dev_id
 						= dev_info->acdb_id;
 				}
-			} else if (dev_info != NULL)
+			} else if (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)
+                                evt_payload->voice_state =
+                                        routing_info.voice_state;
+                        else if (dev_info != NULL)
 				evt_payload->routing_id = dev_info->copp_id;
 			callback->auddev_evt_listener(
 					evt_id,
@@ -881,10 +909,16 @@
 		}
 aud_cal:
 		if (callback->clnt_type == AUDDEV_CLNT_AUDIOCAL) {
+                        int temp_sessions;
 			MM_DBG("AUDDEV_CLNT_AUDIOCAL\n");
-			if (!dev_info->sessions)
+			if (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)
+                                evt_payload->voice_state =
+                                        routing_info.voice_state;
+                        else if (dev_info == NULL || !dev_info->sessions)
 				goto sent_aud_cal;
-			evt_payload->audcal_info.dev_id = dev_info->copp_id;
+			else {
+                                evt_payload->audcal_info.dev_id =
+                                                dev_info->copp_id;
 			evt_payload->audcal_info.acdb_id =
 				dev_info->acdb_id;
 			evt_payload->audcal_info.dev_type =
@@ -894,7 +928,25 @@
 				dev_info->set_sample_rate ?
 				dev_info->set_sample_rate :
 				dev_info->sample_rate;
-
+                        }
+                        if (evt_payload->audcal_info.dev_type ==
+                                                SNDDEV_CAP_TX) {
+                                if (session_id == SESSION_IGNORE)
+                                        temp_sessions = dev_info->sessions;
+                                else
+                                        temp_sessions = session_id;
+                                evt_payload->audcal_info.sessions =
+                                        (temp_sessions >>
+                                                ((AUDDEV_CLNT_ENC-1) * 8));
+                        } else if (dev_info != NULL) {
+                                if (session_id == SESSION_IGNORE)
+                                        temp_sessions = dev_info->sessions;
+                                else
+                                        temp_sessions = session_id;
+                                evt_payload->audcal_info.sessions =
+                                        (temp_sessions >>
+                                                ((AUDDEV_CLNT_DEC-1) * 8));
+                        }
 			callback->auddev_evt_listener(
 				evt_id,
 				evt_payload,
@@ -930,12 +982,12 @@
 					evt_payload->
 					voc_vm_info.dev_vm_val.mute =
 						routing_info.tx_mute;
-				} else {
+				} else if (dev_info != NULL) {
 					evt_payload->voc_vm_info.dev_type =
 						SNDDEV_CAP_RX;
 					evt_payload->voc_vm_info.acdb_dev_id =
 						dev_info->acdb_id;
-					if (routing_info.rx_mute == 1) /*mute rx*/
+					if (routing_info.voice_rx_vol < 0)
 						evt_payload->
 							voc_vm_info.dev_vm_val.mute =
 								routing_info.rx_mute;
@@ -948,7 +1000,7 @@
 					|| (evt_id == AUDDEV_EVT_END_VOICE))
 				memset(evt_payload, 0,
 					sizeof(union auddev_evt_data));
-			else if (evt_id == AUDDEV_EVT_FREQ_CHG) {
+			else if (evt_id == AUDDEV_EVT_FREQ_CHG && dev_info != NULL) {
 				if (routing_info.voice_tx_sample_rate
 						!= dev_info->set_sample_rate) {
 					routing_info.voice_tx_sample_rate
@@ -961,7 +1013,10 @@
 						= dev_info->acdb_id;
 				} else
 					goto sent_voc;
-			} else {
+			} else if (evt_id == AUDDEV_EVT_VOICE_STATE_CHG)
+                                evt_payload->voice_state =
+                                                routing_info.voice_state;
+			else if(dev_info != NULL) {
 				evt_payload->voc_devinfo.dev_type =
 					(dev_info->capability & SNDDEV_CAP_TX) ?
 					SNDDEV_CAP_TX : SNDDEV_CAP_RX;
@@ -979,7 +1034,7 @@
 				evt_id,
 				evt_payload,
 				callback->private_data);
-			if (evt_id == AUDDEV_EVT_DEV_RLS)
+			if (evt_id == AUDDEV_EVT_DEV_RLS && dev_info != NULL)
 				dev_info->sessions &= ~(0xFF);
 sent_voc:
 			if (callback->cb_next == NULL)
@@ -1048,6 +1103,7 @@
 	audio_dev_ctrl.num_dev = 0;
 	audio_dev_ctrl.voice_tx_dev = NULL;
 	audio_dev_ctrl.voice_rx_dev = NULL;
+        routing_info.voice_state = VOICE_STATE_INVALID;
 	return misc_register(&audio_dev_ctrl_misc);
 }
 
@@ -1058,4 +1114,4 @@
 module_exit(audio_dev_ctrl_exit);
 
 MODULE_DESCRIPTION("MSM 7K Audio Device Control driver");
-MODULE_LICENSE("GPL v2");
+MODULE_LICENSE("Dual BSD/GPL");
diff -Naurwd incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audio_pcm_in.c incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audio_pcm_in.c
--- incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audio_pcm_in.c	2011-06-13 15:37:32.000000000 +0400
+++ incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audio_pcm_in.c	2011-06-13 17:29:40.000000000 +0400
@@ -35,12 +35,17 @@
 #include <mach/qdsp5v2/audio_dev_ctl.h>
 #include <mach/debug_mm.h>
 
+
+
 /* FRAME_NUM must be a power of two */
 #define FRAME_NUM		(8)
 #define FRAME_SIZE		(2052 * 2)
 #define MONO_DATA_SIZE		(2048)
 #define STEREO_DATA_SIZE	(MONO_DATA_SIZE * 2)
 #define DMASZ 			(FRAME_SIZE * FRAME_NUM)
+#define AUDIO_GET_VOICE_STATE   _IOR(AUDIO_IOCTL_MAGIC, 55, unsigned)
+
+extern int msm_get_voice_state(void);
 
 struct buffer {
 	void *data;
@@ -61,6 +66,7 @@
 	struct mutex read_lock;
 	wait_queue_head_t wait;
 	wait_queue_head_t wait_enable;
+	wait_queue_head_t wait_voice_incall;
 
 	struct msm_adsp_module *audrec;
 
@@ -82,7 +88,9 @@
 
 	uint16_t source; /* Encoding source bit mask */
 	uint32_t device_events; /* device events interested in */
+        uint32_t in_call;
 	uint32_t dev_cnt;
+        int voice_state;
 	spinlock_t dev_lock;
 
 	/* data allocated for various buffers */
@@ -132,12 +140,12 @@
 	struct audio_in *audio = (struct audio_in *) private_data;
 	unsigned long flags;
 
-	MM_DBG("evt_id = 0x%8x\n", evt_id);
 	switch (evt_id) {
 	case AUDDEV_EVT_DEV_RDY: {
 		MM_DBG("AUDDEV_EVT_DEV_RDY\n");
 		spin_lock_irqsave(&audio->dev_lock, flags);
 		audio->dev_cnt++;
+                if (!audio->in_call)
 		audio->source |= (0x1 << evt_payload->routing_id);
 		spin_unlock_irqrestore(&audio->dev_lock, flags);
 
@@ -150,6 +158,7 @@
 		MM_DBG("AUDDEV_EVT_DEV_RLS\n");
 		spin_lock_irqsave(&audio->dev_lock, flags);
 		audio->dev_cnt--;
+                if (!audio->in_call)
 		audio->source &= ~(0x1 << evt_payload->routing_id);
 		spin_unlock_irqrestore(&audio->dev_lock, flags);
 
@@ -165,6 +174,23 @@
 
 		break;
 	}
+        case AUDDEV_EVT_VOICE_STATE_CHG: {
+                MM_DBG("AUDDEV_EVT_VOICE_STATE_CHG, state = %d\n",
+                                evt_payload->voice_state);
+                audio->voice_state = evt_payload->voice_state;
+                if (audio->in_call) {
+                        if(audio->running) {
+                                if (audio->voice_state == VOICE_STATE_INCALL)
+                                        audpcm_in_record_config(audio, 1);
+                                else if (audio->voice_state == VOICE_STATE_OFFCALL) {
+                                        audpcm_in_record_config(audio, 0);
+                                        wake_up(&audio->wait);
+                                }
+                        }
+                        wake_up(&audio->wait_voice_incall);
+                }
+                break;
+        }
 	case AUDDEV_EVT_FREQ_CHG: {
 		MM_DBG("Encoder Driver got sample rate change event\n");
 		MM_DBG("sample rate %d\n", evt_payload->freq_info.sample_rate);
@@ -250,7 +276,9 @@
 	case AUDREC_CMD_MEM_CFG_DONE_MSG: {
 		MM_DBG("CMD_MEM_CFG_DONE MSG DONE\n");
 		audio->running = 1;
-		if (audio->dev_cnt > 0)
+                if ((!audio->in_call && (audio->dev_cnt > 0)) ||
+                        (audio->in_call &&
+                                (audio->voice_state == VOICE_STATE_INCALL)))
 			audpcm_in_record_config(audio, 1);
 		break;
 	}
@@ -262,6 +290,7 @@
 				fatal_err_msg.audrec_err_id);
 		/* Error stop the encoder */
 		audio->stopped = 1;
+		wake_up(&audio->wait_voice_incall);
 		wake_up(&audio->wait);
 		break;
 	}
@@ -379,7 +408,6 @@
 				AUDPP_A2DP_PIPE_SOURCE_MIX_MASK)
 			cmd.pipe_id |= SOURCE_PIPE_0;
 	}
-
 	return audpreproc_send_audreccmdqueue(&cmd, sizeof(cmd));
 }
 
@@ -450,6 +478,7 @@
 		audio->enabled = 0;
 		audpcm_in_enc_config(audio, 0);
 		wake_up(&audio->wait);
+		wake_up(&audio->wait_voice_incall);
 		wait_event_interruptible_timeout(audio->wait_enable,
 				audio->running == 0, 1*HZ);
 		msm_adsp_disable(audio->audrec);
@@ -490,8 +519,12 @@
 		if (copy_to_user((void *) arg, &stats, sizeof(stats)))
 			return -EFAULT;
 		return rc;
+	} else if (cmd == AUDIO_GET_VOICE_STATE) {
+                int vstate = audio->voice_state;
+                if (copy_to_user((void *) arg, &vstate, sizeof(vstate)))
+                        return -EFAULT;
+                return rc;
 	}
-
 	mutex_lock(&audio->lock);
 	switch (cmd) {
 	case AUDIO_START: {
@@ -499,6 +532,29 @@
 		/* Poll at 48KHz always */
 		freq = 48000;
 		MM_DBG("AUDIO_START\n");
+
+#if 0
+                if (audio->in_call && (audio->voice_state != VOICE_STATE_INCALL)) {
+                        rc = -EPERM;
+                        break;
+                }
+#else
+                if (audio->in_call && (audio->voice_state != VOICE_STATE_INCALL)) {
+                        struct timespec ts = CURRENT_TIME;
+                        mutex_unlock(&audio->lock);
+                        rc = wait_event_interruptible(audio->wait_voice_incall,
+                                audio->voice_state == VOICE_STATE_INCALL || !audio->in_call
+                                        || audio->stopped || audio->abort);
+                        if(rc < 0 || audio->voice_state != VOICE_STATE_INCALL) {
+                                MM_DBG("valid incall state unreacheable\n");
+                                return -EPERM;
+                        }
+                        mutex_lock(&audio->lock);
+                        ts = timespec_sub(CURRENT_TIME,ts);
+                        MM_DBG("waited %ld.%ldms for voice incall state\n", ts.tv_sec, ts.tv_nsec/NSEC_PER_MSEC);
+                }
+#endif
+
 		rc = msm_snddev_request_freq(&freq, audio->enc_id,
 					SNDDEV_CAP_TX, AUDDEV_CLNT_ENC);
 		MM_DBG("sample rate configured %d sample rate requested %d\n",
@@ -530,12 +586,14 @@
 		rc = audpcm_in_disable(audio);
 		rc = msm_snddev_withdraw_freq(audio->enc_id,
 					SNDDEV_CAP_TX, AUDDEV_CLNT_ENC);
-		MM_DBG("msm_snddev_withdraw_freq\n");
+		MM_DBG("AUDIO_STOP\n");
 		audio->stopped = 1;
 		audio->abort = 0;
+		wake_up(&audio->wait_voice_incall);
 		break;
 	}
 	case AUDIO_FLUSH: {
+		MM_DBG("AUDIO_FLUSH\n");
 		if (audio->stopped) {
 			/* Make sure we're stopped and we wake any threads
 			 * that might be blocked holding the read_lock.
@@ -583,6 +641,34 @@
 			rc = -EFAULT;
 		break;
 	}
+        case AUDIO_SET_INCALL: {
+                struct msm_voicerec_mode cfg;
+                unsigned long flags;
+                MM_DBG("AUDIO_SET_INCALL\n");
+                if (copy_from_user(&cfg, (void *) arg, sizeof(cfg))) {
+                        rc = -EFAULT;
+                        break;
+                }
+                if (cfg.rec_mode != VOC_REC_BOTH &&
+                        cfg.rec_mode != VOC_REC_UPLINK &&
+                        cfg.rec_mode != VOC_REC_DOWNLINK) {
+                        MM_ERR("invalid rec_mode\n");
+                        rc = -EINVAL;
+                        break;
+                } else {
+                        spin_lock_irqsave(&audio->dev_lock, flags);
+                        if (cfg.rec_mode == VOC_REC_UPLINK)
+                                audio->source = VOICE_UL_SOURCE_MIX_MASK;
+                        else if (cfg.rec_mode == VOC_REC_DOWNLINK)
+                                audio->source = VOICE_DL_SOURCE_MIX_MASK;
+                        else
+                                audio->source = VOICE_DL_SOURCE_MIX_MASK |
+                                                VOICE_UL_SOURCE_MIX_MASK ;
+                        audio->in_call = 1;
+                        spin_unlock_irqrestore(&audio->dev_lock, flags);
+                }
+                break;
+        }
 	case AUDIO_GET_SESSION_ID: {
 		if (copy_to_user((void *) arg, &audio->enc_id,
 			sizeof(unsigned short))) {
@@ -613,15 +699,24 @@
 	while (count > 0) {
 		rc = wait_event_interruptible(
 			audio->wait, (audio->in_count > 0) || audio->stopped ||
-			audio->abort);
+                        audio->abort || (audio->in_call && audio->running &&
+                                (audio->voice_state == VOICE_STATE_OFFCALL)));
 
 		if (rc < 0)
 			break;
 
-		if (audio->stopped && !audio->in_count) {
-			MM_DBG("Driver in stop state, No more buffer to read");
+                if (!audio->in_count) {
+                        if (audio->stopped) {
+                                MM_DBG("Driver in stop state, No more \
+                                                buffer to read");
 			rc = 0;/* End of File */
 			break;
+                        } else if (audio->in_call && audio->running &&
+                                (audio->voice_state == VOICE_STATE_OFFCALL)) {
+                                MM_DBG("Not Permitted Voice Terminated\n");
+                                rc = -EPERM; /* Voice Call stopped */
+                                break;
+                        }
 		}
 
 		if (audio->abort) {
@@ -675,6 +770,7 @@
 	struct audio_in *audio = file->private_data;
 
 	mutex_lock(&audio->lock);
+        audio->in_call = 0;
 	/* with draw frequency for session
 	   incase not stopped the driver */
 	msm_snddev_withdraw_freq(audio->enc_id, SNDDEV_CAP_TX,
@@ -690,6 +786,7 @@
 	return 0;
 }
 
+
 static int audpcm_in_open(struct inode *inode, struct file *file)
 {
 	struct audio_in *audio = &the_audio_in;
@@ -701,6 +798,9 @@
 		rc = -EBUSY;
 		goto done;
 	}
+	
+	audio->mode = MSM_AUD_ENC_MODE_TUNNEL;
+
 	/* Settings will be re-config at AUDIO_SET_CONFIG,
 	 * but at least we need to have initial config
 	 */
@@ -708,7 +808,6 @@
 	audio->buffer_size = MONO_DATA_SIZE;
 	audio->samp_rate = 8000;
 	audio->enc_type = ENC_TYPE_WAV | audio->mode;
-	audio->source = INTERNAL_CODEC_TX_SOURCE_MIX_MASK;
 
 	encid = audpreproc_aenc_alloc(audio->enc_type, &audio->module_name,
 			&audio->queue_ids);
@@ -719,6 +818,8 @@
 	}
 	audio->enc_id = encid;
 
+	MM_DBG("allocated encoder %d, module %s\n", encid, audio->module_name);
+
 	rc = msm_adsp_get(audio->module_name, &audio->audrec,
 			   &audrec_adsp_ops, audio);
 
@@ -732,7 +833,10 @@
 	audio->abort = 0;
 	audpcm_in_flush(audio);
 	audio->device_events = AUDDEV_EVT_DEV_RDY | AUDDEV_EVT_DEV_RLS |
-				AUDDEV_EVT_FREQ_CHG;
+				AUDDEV_EVT_FREQ_CHG |
+                                AUDDEV_EVT_VOICE_STATE_CHG;
+
+        audio->voice_state = msm_get_voice_state();
 
 	rc = auddev_register_evt_listner(audio->device_events,
 					AUDDEV_CLNT_ENC, audio->enc_id,
@@ -786,6 +890,7 @@
 	spin_lock_init(&the_audio_in.dev_lock);
 	init_waitqueue_head(&the_audio_in.wait);
 	init_waitqueue_head(&the_audio_in.wait_enable);
+	init_waitqueue_head(&the_audio_in.wait_voice_incall);
 	return misc_register(&audio_in_misc);
 }
 
diff -Naurwd incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audpreproc.c incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audpreproc.c
--- incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/audpreproc.c	2011-06-13 15:37:32.000000000 +0400
+++ incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/audpreproc.c	2011-06-13 16:46:10.000000000 +0400
@@ -25,6 +25,8 @@
 #include <mach/qdsp5v2/audpreproc.h>
 #include <mach/debug_mm.h>
 
+#define NEW_IFACE 1
+/* #undef NEW_IFACE */
 
 static DEFINE_MUTEX(audpreproc_lock);
 static struct wake_lock audpre_wake_lock;
@@ -37,10 +39,16 @@
 	int nr_codec_support; /* number of codec suported */
 };
 
+#ifdef NEW_IFACE
 #define ENC_MODULE_INFO(name, queueids, encid, formats, nr_codec) \
 	{.module_name = name, .module_queueids = queueids, \
 	 .module_encid = encid, .enc_formats = formats, \
 	 .nr_codec_support = nr_codec }
+#else
+#define ENC_MODULE_INFO(name, queueids, encid, formats) { .module_name = name, \
+	.module_queueids = queueids, .module_encid = encid, \
+	.enc_formats = formats}
+#endif
 
 #define MAX_EVENT_CALLBACK_CLIENTS 1
 
@@ -58,6 +66,7 @@
 	struct msm_adspenc_info *enc_info_list;
 };
 
+#ifdef NEW_IFACE
 static struct msm_adspenc_info enc_info_list[] = {
 	ENC_MODULE_INFO("AUDREC0TASK", \
 			((QDSP_uPAudRec0BitStreamQueue << 16)| \
@@ -69,13 +78,28 @@
 			   QDSP_uPAudRec1CmdQueue), 1, \
 			 (ENC1_FORMAT | (1 << MSM_ADSP_ENC_MODE_TUNNEL) | \
 			  (1 << MSM_ADSP_ENC_MODE_NON_TUNNEL)), 5),
-
 	ENC_MODULE_INFO("AUDREC2TASK", \
 			 ((QDSP_uPAudRec2BitStreamQueue << 16)| \
 			   QDSP_uPAudRec2CmdQueue), 2, \
 			 (ENC2_FORMAT  | (1 << MSM_ADSP_ENC_MODE_TUNNEL)), 1),
-
 };
+#else
+static struct msm_adspenc_info enc_info_list[] = {
+	ENC_MODULE_INFO("AUDREC0TASK", \
+			 ((QDSP_uPAudRec0BitStreamQueue << 16)| \
+			   QDSP_uPAudRec0CmdQueue), 0, \
+			 ((1 << MSM_ADSP_ENC_CODEC_WAV) | \
+			  (1 << MSM_ADSP_ENC_CODEC_SBC))),
+	ENC_MODULE_INFO("AUDREC1TASK", \
+			 ((QDSP_uPAudRec1BitStreamQueue << 16)| \
+			   QDSP_uPAudRec1CmdQueue), 1, \
+			 ((1 << MSM_ADSP_ENC_CODEC_WAV) | \
+			  (1 << MSM_ADSP_ENC_CODEC_AAC) | \
+			  (1 << MSM_ADSP_ENC_CODEC_AMRNB) | \
+			  (1 << MSM_ADSP_ENC_CODEC_EVRC) | \
+			  (1 << MSM_ADSP_ENC_CODEC_QCELP))),
+};
+#endif
 
 static struct msm_adspenc_database msm_enc_database = {
 	.num_enc = ARRAY_SIZE(enc_info_list),
@@ -330,6 +354,7 @@
 /* enc_type = supported encode format *
  * like pcm, aac, sbc, evrc, qcelp, amrnb etc ... *
  */
+#ifdef NEW_IFACE
 int audpreproc_aenc_alloc(unsigned enc_type, const char **module_name,
 		     unsigned *queue_ids)
 {
@@ -381,6 +406,43 @@
 	mutex_unlock(audpreproc->lock);
 	return encid;
 }
+#else
+int audpreproc_aenc_alloc(unsigned enc_type, const char **module_name,
+                     unsigned *queue_ids)
+{
+        struct audpreproc_state *audpreproc = &the_audpreproc_state;
+        int encid = -1, idx;
+        static int wakelock_init;
+
+        mutex_lock(audpreproc->lock);
+        for (idx = (msm_enc_database.num_enc - 1);
+                idx >= 0; idx--) {
+                /* encoder free and supports the format */
+                if ((!(audpreproc->enc_inuse & (1 << idx))) &&
+                        (msm_enc_database.enc_info_list[idx].enc_formats &
+                                (1 << enc_type))) {
+                                break;
+                }
+        }
+
+        if (idx >= 0) {
+                audpreproc->enc_inuse |= (1 << idx);
+                *module_name =
+                    msm_enc_database.enc_info_list[idx].module_name;
+                *queue_ids =
+                    msm_enc_database.enc_info_list[idx].module_queueids;
+                encid = msm_enc_database.enc_info_list[idx].module_encid;
+        }
+
+        if (!wakelock_init) {
+                wake_lock_init(&audpre_wake_lock, WAKE_LOCK_SUSPEND, "audpre");
+                wakelock_init = 1;
+        }
+
+        mutex_unlock(audpreproc->lock);
+        return encid;
+}
+#endif
 EXPORT_SYMBOL(audpreproc_aenc_alloc);
 
 void audpreproc_aenc_free(int enc_id)
diff -Naurwd incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/voice.c incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/voice.c
--- incs-gb-kernel.orig/arch/arm/mach-msm/qdsp5v2/voice.c	2011-06-13 15:37:32.000000000 +0400
+++ incs-gb-kernel/arch/arm/mach-msm/qdsp5v2/voice.c	2011-06-13 16:43:19.000000000 +0400
@@ -687,6 +687,8 @@
 						rc = voice_cmd_device_info(v);
 						rc = voice_cmd_acquire_done(v);
 						v->voc_state = VOICE_ACQUIRE;
+                                                broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                                        VOICE_STATE_INCALL, SESSION_IGNORE);
 						pr_info("voc_state -> VOICE_ACQUIRE\n");
 					} else {
 						pr_info("start waiting for "
@@ -695,18 +697,21 @@
 							v->dev_wait,
 							(v->dev_state == DEV_READY)
 							|| (atomic_read(&v->rel_start_flag) == 1));
-						if (atomic_read(&v->rel_start_flag)
-							== 1) {
+						if (atomic_read(&v->rel_start_flag)== 1) {
 							v->voc_state = VOICE_RELEASE;
 							pr_info("voc_state -> VOICE_RELEASE\n");
 							atomic_dec(&v->rel_start_flag);
 							msm_snddev_withdraw_freq(0,
 								SNDDEV_CAP_TX, AUDDEV_CLNT_VOC);
+                                                        broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                                                VOICE_STATE_OFFCALL, SESSION_IGNORE);
 						} else {
 							voice_change_sample_rate(v);
 							rc = voice_cmd_device_info(v);
 							rc = voice_cmd_acquire_done(v);
 							v->voc_state = VOICE_ACQUIRE;
+                                                        broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                                                VOICE_STATE_INCALL, SESSION_IGNORE);
 							pr_info("voc_state -> VOICE_ACQUIRE\n");
 						}
 					}
@@ -728,8 +733,9 @@
 					(v->dev_state == DEV_INIT)) {
 					v->voc_state = VOICE_RELEASE;
 					pr_info("voc_state -> VOICE_RELEASE\n");
-					msm_snddev_withdraw_freq(0, SNDDEV_CAP_TX,
-						AUDDEV_CLNT_VOC);
+					msm_snddev_withdraw_freq(0, SNDDEV_CAP_TX, AUDDEV_CLNT_VOC);
+                                        broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                                VOICE_STATE_OFFCALL,SESSION_IGNORE);
 				} else {
 					/* wait for the dev_state = RELEASE */
 					pr_info("start waiting for "
@@ -743,8 +749,9 @@
 						rc = voice_cmd_release_done(v);
 					v->voc_state = VOICE_RELEASE;
 					pr_info("voc_state -> VOICE_RELEASE\n");
-					msm_snddev_withdraw_freq(0, SNDDEV_CAP_TX,
-						AUDDEV_CLNT_VOC);
+					msm_snddev_withdraw_freq(0, SNDDEV_CAP_TX,AUDDEV_CLNT_VOC);
+                                        broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                                VOICE_STATE_OFFCALL,SESSION_IGNORE);
 				}
 				if (atomic_read(&v->rel_start_flag))
 					atomic_dec(&v->rel_start_flag);
@@ -789,6 +796,8 @@
 				/* update voice state */
 				v->voc_state = VOICE_ACQUIRE;
 				pr_info("voc_state -> VOICE_ACQUIRE\n");
+                                broadcast_event(AUDDEV_EVT_VOICE_STATE_CHG,
+                                        VOICE_STATE_INCALL, SESSION_IGNORE);
 			} else {
 				MM_ERR("Get DEV_CHANGE_READY "
 					"at the wrong voc_state %d\n", v->voc_state);

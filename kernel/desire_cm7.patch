diff -aur cm-kernel.orig/arch/arm/mach-msm/qdsp6/pcm_in.c cm-kernel/arch/arm/mach-msm/qdsp6/pcm_in.c
--- cm-kernel.orig/arch/arm/mach-msm/qdsp6/pcm_in.c	2011-03-14 19:11:00.000000000 +0300
+++ cm-kernel/arch/arm/mach-msm/qdsp6/pcm_in.c	2011-03-13 14:55:35.000000000 +0300
@@ -21,24 +21,44 @@
 #include <linux/sched.h>
 #include <linux/wait.h>
 #include <linux/uaccess.h>
+#include <linux/slab.h>
 
 #include <linux/msm_audio.h>
 
 #include <mach/msm_qdsp6_audio.h>
 
 #define BUFSZ (256)
-
+#if 0
 static DEFINE_MUTEX(pcm_in_lock);
 static uint32_t sample_rate = 8000;
 static uint32_t channel_count = 1;
 static uint32_t buffer_size = BUFSZ;
 static int pcm_in_opened = 0;
+#else
+struct msm_voicerec_mode {
+        uint32_t rec_mode;
+};
+
+
+#define AUDIO_SET_INCALL _IOW(AUDIO_IOCTL_MAGIC, 19, struct msm_voicerec_mode)
+#define AUDIO_FLAG_INCALL_MIXED       2
+
+struct pcm {
+        struct audio_client *ac;
+        uint32_t sample_rate;
+        uint32_t channel_count;
+        uint32_t buffer_size;
+        uint32_t rec_mode;
+};
+#endif
 
 void audio_client_dump(struct audio_client *ac);
 
 static long q6_in_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	int rc = 0;
+	struct pcm *pcm = file->private_data;
+
 
 	switch (cmd) {
 	case AUDIO_SET_VOLUME:
@@ -60,7 +80,7 @@
 			rc = -EFAULT;
 			break;
 		}
-
+#if 0
 		mutex_lock(&pcm_in_lock);
 		if (file->private_data) {
 			rc = -EBUSY;
@@ -72,6 +92,18 @@
 				rc = -ENOMEM;
 		}
 		mutex_unlock(&pcm_in_lock);
+#else
+                if (pcm->ac) {
+                        rc = -EBUSY;
+                } else {
+                        pcm->ac = q6audio_open_pcm(pcm->buffer_size,
+                                        pcm->sample_rate, pcm->channel_count,
+                                        pcm->rec_mode, acdb_id);
+                        if (!pcm->ac)
+                                rc = -ENOMEM;
+                }
+#endif
+
 		break;
 	}
 	case AUDIO_STOP:
@@ -96,17 +128,47 @@
 			rc = -EINVAL;
 			break;
 		}
+#if 0
 		sample_rate = config.sample_rate;
 		channel_count = config.channel_count;
 		buffer_size = config.buffer_size;
 		break;
+#else
+                pcm->sample_rate = config.sample_rate;
+                pcm->channel_count = config.channel_count;
+                pcm->buffer_size = config.buffer_size;
+                break;
+#endif
 	}
+
+        case AUDIO_SET_INCALL: {
+                struct msm_voicerec_mode voicerec_mode;
+                if (copy_from_user(&voicerec_mode, (void *)arg,
+                        sizeof(struct msm_voicerec_mode)))
+                        return -EFAULT;
+                if (voicerec_mode.rec_mode != AUDIO_FLAG_READ &&
+                        voicerec_mode.rec_mode != AUDIO_FLAG_INCALL_MIXED) {
+                        pcm->rec_mode = AUDIO_FLAG_READ;
+                        pr_err("invalid rec_mode\n");
+                        rc = -EINVAL;
+                } else
+                        pcm->rec_mode = voicerec_mode.rec_mode;
+                break;
+        }
+
+
 	case AUDIO_GET_CONFIG: {
 		struct msm_audio_config config;
+#if 0
 		config.buffer_size = buffer_size;
-		config.buffer_count = 2;
 		config.sample_rate = sample_rate;
 		config.channel_count = channel_count;
+#else
+		config.buffer_size = pcm->buffer_size;
+		config.sample_rate = pcm->sample_rate;
+		config.channel_count = pcm->channel_count;
+#endif
+		config.buffer_count = 2;
 		config.unused[0] = 0;
 		config.unused[1] = 0;
 		config.unused[2] = 0;
@@ -123,6 +185,7 @@
 
 static int q6_in_open(struct inode *inode, struct file *file)
 {
+#if 0
 	int rc;
 
 	pr_info("pcm_in: open\n");
@@ -136,6 +199,22 @@
 	}
 	mutex_unlock(&pcm_in_lock);
 	return rc;
+#else
+        struct pcm *pcm;
+
+        pr_info("pcm_in: open\n");
+        pcm = kzalloc(sizeof(struct pcm), GFP_KERNEL);
+
+        if (!pcm)
+                return -ENOMEM;
+
+        pcm->channel_count = 1;
+        pcm->sample_rate = 8000;
+        pcm->buffer_size = BUFSZ;
+        pcm->rec_mode = AUDIO_FLAG_READ;
+        file->private_data = pcm;
+        return 0;
+#endif
 }
 
 static ssize_t q6_in_read(struct file *file, char __user *buf,
@@ -146,9 +225,13 @@
 	const char __user *start = buf;
 	int xfer;
 	int res;
-
+#if 0
 	mutex_lock(&pcm_in_lock);
 	ac = file->private_data;
+#else
+        struct pcm *pcm = file->private_data;
+	ac = pcm->ac;
+#endif
 	if (!ac) {
 		res = -ENODEV;
 		goto fail;
@@ -181,19 +264,28 @@
 	}
 fail:
 	res = buf - start;
+#if 0
 	mutex_unlock(&pcm_in_lock);
-
+#endif
 	return res;
 }
 
 static int q6_in_release(struct inode *inode, struct file *file)
 {
 	int rc = 0;
+#if 0
 	mutex_lock(&pcm_in_lock);
 	if (file->private_data)
 		rc = q6audio_close(file->private_data);
 	pcm_in_opened = 0;
 	mutex_unlock(&pcm_in_lock);
+#else
+        struct pcm *pcm = file->private_data;
+        if (pcm->ac)
+                rc = q6audio_close(pcm->ac);
+        kfree(pcm);
+#endif
+
 	pr_info("pcm_in: release\n");
 	return rc;
 }
@@ -217,4 +309,3 @@
 }
 
 device_initcall(q6_in_init);
-
diff -aur cm-kernel.orig/arch/arm/mach-msm/qdsp6/q6audio.c cm-kernel/arch/arm/mach-msm/qdsp6/q6audio.c
--- cm-kernel.orig/arch/arm/mach-msm/qdsp6/q6audio.c	2011-03-14 19:10:10.000000000 +0300
+++ cm-kernel/arch/arm/mach-msm/qdsp6/q6audio.c	2011-03-13 14:39:26.000000000 +0300
@@ -394,6 +394,7 @@
 	return audio_ioctl(ac, &rpc, sizeof(rpc));
 }
 
+#if 0
 static int audio_in_open(struct audio_client *ac, uint32_t bufsz,
 			 uint32_t rate, uint32_t channels)
 {
@@ -416,6 +417,35 @@
 	TRACE("%p: open in\n", ac);
 	return audio_ioctl(ac, &rpc, sizeof(rpc));
 }
+#else
+static int audio_in_open(struct audio_client *ac, uint32_t bufsz,
+                         uint32_t flags, uint32_t rate, uint32_t channels)
+{
+        struct adsp_open_command rpc;
+
+        memset(&rpc, 0, sizeof(rpc));
+
+        rpc.format.standard.format = ADSP_AUDIO_FORMAT_PCM;
+        rpc.format.standard.channels = channels;
+        rpc.format.standard.bits_per_sample = 16;
+        rpc.format.standard.sampling_rate = rate;
+        rpc.format.standard.is_signed = 1;
+        rpc.format.standard.is_interleaved = 1;
+
+        rpc.hdr.opcode = ADSP_AUDIO_IOCTL_CMD_OPEN_READ;
+        rpc.device = ADSP_AUDIO_DEVICE_ID_DEFAULT;
+        if (flags == AUDIO_FLAG_READ)
+                rpc.stream_context = ADSP_AUDIO_DEVICE_CONTEXT_RECORD;
+        else
+                rpc.stream_context = ADSP_AUDIO_DEVICE_CONTEXT_MIXED_RECORD;
+
+        rpc.buf_max_size = bufsz;
+
+        TRACE("%p: open in\n", ac);
+        return audio_ioctl(ac, &rpc, sizeof(rpc));
+}
+#endif
+
 
 static int audio_mp3_open(struct audio_client *ac, uint32_t bufsz,
 			  uint32_t rate, uint32_t channels)
@@ -1415,6 +1445,31 @@
 	return 0;
 }
 
+static void adie_rx_path_enable(uint32_t acdb_id)
+{
+        if (audio_rx_path_id) {
+                adie_enable();
+                adie_set_path(adie, audio_rx_path_id, ADIE_PATH_RX);
+                adie_set_path_freq_plan(adie, ADIE_PATH_RX, 48000);
+
+                adie_proceed_to_stage(adie, ADIE_PATH_RX,
+                                ADIE_STAGE_DIGITAL_READY);
+                adie_proceed_to_stage(adie, ADIE_PATH_RX,
+                                ADIE_STAGE_DIGITAL_ANALOG_READY);
+        }
+}
+
+static void q6_rx_path_enable(int reconf, uint32_t acdb_id)
+{
+        audio_update_acdb(audio_rx_device_id, acdb_id);
+        if (!reconf)
+                qdsp6_devchg_notify(ac_control, ADSP_AUDIO_RX_DEVICE, audio_rx_device_id);
+        qdsp6_standby(ac_control);
+        qdsp6_start(ac_control);
+}
+
+
+
 struct audio_client *q6audio_open_pcm(uint32_t bufsz, uint32_t rate,
 				      uint32_t channels, uint32_t flags, uint32_t acdb_id)
 {
@@ -1431,7 +1486,7 @@
 	ac->flags = flags;
 
 	mutex_lock(&audio_path_lock);
-
+#if 0
 	if (ac->flags & AUDIO_FLAG_WRITE) {
 		audio_rx_path_refcount++;
 		if (audio_rx_path_refcount == 1) {
@@ -1476,7 +1531,47 @@
 			audio_rx_analog_enable(1);
 		}
 	}
-
+#else
+        if (ac->flags & AUDIO_FLAG_WRITE) {
+                audio_rx_path_refcount++;
+                if (audio_rx_path_refcount == 1) {
+                        _audio_rx_clk_enable();
+                        q6_rx_path_enable(0, acdb_id);
+                        adie_rx_path_enable(acdb_id);
+                }
+        } else {
+                /* TODO: consider concurrency with voice call */
+                if (audio_tx_path_refcount > 0) {
+                        tx_clk_freq = 8000;
+                } else {
+                        tx_clk_freq = rate;
+                }
+                audio_tx_path_refcount++;
+                if (audio_tx_path_refcount == 1) {
+                        tx_clk_freq = rate;
+                        _audio_tx_clk_enable();
+                        _audio_tx_path_enable(0, acdb_id);
+                }
+        }
+
+        for (retry = 5;;retry--) {
+                if (ac->flags & AUDIO_FLAG_WRITE)
+                        rc = audio_out_open(ac, bufsz, rate, channels);
+                else
+                        rc = audio_in_open(ac, bufsz, flags, rate, channels);
+                if (rc == 0)
+                        break;
+                if (retry == 0)
+                        BUG();
+                pr_err("q6audio: open pcm error %d, retrying\n", rc);
+                msleep(1);
+        }
+
+        if (ac->flags & AUDIO_FLAG_WRITE) {
+                if (audio_rx_path_refcount == 1)
+                        audio_rx_analog_enable(1);
+        }
+#endif
 	mutex_unlock(&audio_path_lock);
 
 	for (retry = 5;;retry--) {
@@ -1615,4 +1710,3 @@
 	return 0;
 }
 
-
